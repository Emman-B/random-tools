{"version":3,"sources":["components/NumberGeneratorLogic.js","components/NumberGenerator.js","components/ListRandomizerLogic.js","components/ListRandomizer.js","App.js","reportWebVitals.js","index.js"],"names":["generateRandomNumber","min","max","checkIsFloat","Math","random","floor","num","numStr","String","parseInt","parseFloat","useStyles","makeStyles","theme","generateButton","margin","result","padding","minHeight","resultTitle","paddingTop","paddingLeft","fontWeight","NumberGenerator","useState","setMin","setMax","resultText","setResultText","classes","TextField","name","type","defaultValue","label","onChange","event","Number","target","value","Button","variant","color","className","disabled","onClick","randomlyGeneratedNumber","Paper","Collapse","in","Typography","processInput","input","arrayInput","omitUndefinedOrEmptyElements","push","split","splitStringByNewline","processedArray","resultArray","forEach","element","undefined","length","pop","newPosition","randomizeArray","resultString","i","randomizeButton","whiteSpace","minWidth","ListRandomizer","setInput","multiline","elevation","root","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02f56827.chunk.js","sourcesContent":["\n/**\n * Generates a random number between min and max. If min or max is a float, the function\n * will generate a random float instead.\n * (uses code from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n * @param {number} min minimum number to generate\n * @param {number} max maximimum number to generate\n * @returns {number} randomly generated number\n */\nexport function generateRandomNumber(min, max) {\n  if (checkIsFloat(min) || checkIsFloat(max)) {\n    return Math.random() * (max - min) + min;\n  }\n  else {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n\n/**\n * Checks if a number if a float or integer\n * @param {number} num either a float or integer\n * @returns {boolean}\n */\nexport function checkIsFloat(num) {\n  // turn the num into a string\n  const numStr = String(num);\n\n  // parse the num string into an int and float\n  const numInt = parseInt(numStr);\n  const numFloat = parseFloat(numStr);\n\n  // if parseInt/Float has the same value, then num was an integer; otherwise it is a float\n  return numInt !== numFloat;\n}\n","import { Button, Collapse, Paper, TextField, Typography } from '@material-ui/core';\nimport { generateRandomNumber } from './NumberGeneratorLogic.js';\nimport { makeStyles } from '@material-ui/core';\nimport { useState } from 'react';\n\n// Styles\nconst useStyles = makeStyles((theme) => ({\n  generateButton: {\n    margin: '5px',\n  },\n  result: {\n    padding: '10px',\n    minHeight: '10pt',\n  },\n  resultTitle: {\n    paddingTop: '5px',\n    paddingLeft: '5px',\n    minHeight: '10pt',\n    fontWeight: 'bold',\n  },\n}));\n\n// Component Function\nfunction NumberGenerator() {\n  // == State to keep track of ==\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n  const [resultText, setResultText] = useState('');\n\n  // retrieve the styles\n  const classes = useStyles();\n\n  // handling change of min or max\n  const handleMinChange = (event) => {\n    setResultText('');\n    setMin(Number.parseFloat(event.target.value));\n  };\n  const handleMaxChange = (event) => {\n    setResultText('');\n    setMax(Number.parseFloat(event.target.value));\n  };\n\n  return (\n    <>\n      <div>\n        <TextField name={'minVal'} type={'number'} defaultValue={0} label={'Min Value'} onChange={handleMinChange} />\n        <TextField name={'maxVal'} type={'number'} defaultValue={0} label={'Max Value'} onChange={handleMaxChange} />\n      </div>\n      <Button \n        variant={'contained'} \n        color={'primary'} \n        className={classes.generateButton}\n        disabled={min > max}\n        onClick={(event) => {\n          const randomlyGeneratedNumber = generateRandomNumber(min, max);\n          if (randomlyGeneratedNumber) {\n            setResultText(randomlyGeneratedNumber);\n          }\n        }}>Generate</Button>\n      <Paper>\n        <Collapse in={(resultText)?true:false}>\n          <Typography className={classes.resultTitle}>Result</Typography>\n          <Typography className={classes.result}>{resultText}</Typography>\n        </Collapse>\n      </Paper>\n    </>\n  );\n};\n\nexport default NumberGenerator;\n","import { generateRandomNumber } from \"./NumberGeneratorLogic\";\n\nexport function processInput (input) {\n  // first, split strings by the newline and remove any undefined/empty elements\n  let arrayInput = omitUndefinedOrEmptyElements(splitStringByNewline(input));\n\n  // then randomize the input array\n  arrayInput = randomizeArray(arrayInput);\n\n  // afterwards, construct a new string using this array and return it. this new strings should be separated by \\n\n  let resultString = '';\n  for (let i = 0; i < arrayInput.length; i++) {\n    const element = arrayInput[i];\n    // do not prefix element with newline if first item\n    if (i === 0) {\n      resultString += element;\n    }\n    else {\n      resultString += `\\n${element}`;\n    }\n  }\n\n  // return resulting string after processing\n  return resultString;\n}\n\n/**\n * Shorthand to split a string by the newline (\\n) character\n * @param {string} input full input as a string\n * @returns array of strings\n */\nexport function splitStringByNewline(input) {\n  const result = [];\n  result.push(...input.split('\\n'));\n  return result;\n}\n\n/**\n * takes an array and returns a copy of it without any undefined or null elements or any\n * strings with no length\n * @param {array} arrayInput array (which could have undefined/null/empty elements)\n * @returns array of elements without the undefined or null or empty elements\n */\nexport function omitUndefinedOrEmptyElements(arrayInput) {\n  const resultArray = [];\n  arrayInput.forEach((element) => {\n    if (element !== undefined && element !== null) {\n      if (typeof element === 'string' && element.length > 0) {\n        resultArray.push(element);\n      }\n    }});\n  return resultArray;\n}\n\nexport function randomizeArray(arrayInput) {\n  // first copy the input array and process it to not have any empty elements\n  const processedArray = omitUndefinedOrEmptyElements(arrayInput);\n\n  // then create a copy of that array with the same number of elements that are undefined\n  const resultArray = [];\n  processedArray.forEach((element) => resultArray.push(undefined)); // pushes undefined for each element in processedArray\n\n  // loop while the input array copy is not empty\n  while (processedArray.length > 0) {\n    // pop an element off this array\n    const element = processedArray.pop();\n    \n    // try to find a new random location for this element on the new array\n    let newPosition = generateRandomNumber(0, resultArray.length - 1);\n    // if this new position is occupied, check the next index in a loop\n    while (resultArray[newPosition] !== undefined) {\n      newPosition = (newPosition + 1) % resultArray.length;\n    }\n    // then when a newposition is found, add the element to the result array\n    resultArray[newPosition] = element;\n  }\n\n  // return the result\n  return resultArray;\n}\n","import { Button, Collapse, Paper, TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core';\nimport { useState } from 'react';\nimport { processInput } from './ListRandomizerLogic';\n\n// Styles\nconst useStyles = makeStyles((theme) => ({\n  randomizeButton: {\n    margin: '5px',\n  },\n  resultTitle: {\n    paddingTop: '5px',\n    paddingLeft: '5px',\n    minHeight: '10pt',\n    fontWeight: 'bold',\n  },\n  result: {\n    padding: '5px',\n    minHeight: '10pt',\n    whiteSpace: 'pre-wrap',\n  },\n  input: {\n    minWidth: '85vw',\n  },\n}));\n\n// Component Function\nfunction ListRandomizer() {\n  // == State to keep track of ==\n  const [input, setInput] = useState('');\n  const [resultText, setResultText] = useState('');\n\n  // retrieve the styles\n  const classes = useStyles();\n\n  // handle when the randomize button is clicked\n  const handleRandomizeButton = (event) => {\n    setResultText(processInput(input));\n  };\n\n  return (\n    <>\n      <TextField multiline className={classes.input} label={'Items (on separate lines)'} onChange={(event) => {\n        setInput(event.target.value);\n        // if the new input is also smaller (NOT LARGER) than what it is before, reset the result\n        if (event.target.value.length < input.length) {\n          setResultText('');\n        }\n      }} />\n      <div>\n        <Button variant={'contained'} color={'primary'} className={classes.randomizeButton} onClick={handleRandomizeButton}>Randomize</Button>\n      </div>\n      <Collapse in={(resultText)?true:false}>\n        <Paper elevation={10}>\n          <Typography className={classes.resultTitle}>Result</Typography>\n          <Typography className={classes.result}>\n            {resultText}\n          </Typography>\n        </Paper>\n      </Collapse>\n    </>\n  );\n};\n\nexport default ListRandomizer;\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport NumberGenerator from \"./components/NumberGenerator\";\nimport ListRandomizer from \"./components/ListRandomizer\";\nimport './App.css';\n\n// Styles\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // margins/padding/etc\n    margin: '15px',\n    padding: '5px',\n\n    // width/height\n    minWidth: '20vw',\n    // maxWidth: '50vw',\n  }\n}));\n\n// Component Function\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Paper className={classes.root}>\n        <NumberGenerator />\n      </Paper>\n      <Paper className={classes.root}>\n        <ListRandomizer />\n      </Paper>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}